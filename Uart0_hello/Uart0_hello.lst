
Uart0_hello.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00802800  00802800  000001c9  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000146  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000000f  00004146  00000146  000001ba  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .comment      00000030  00000000  00000000  000001c9  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001fc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  0000023c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002954  00000000  00000000  00000274  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000248b  00000000  00000000  00002bc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003b6  00000000  00000000  00005053  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000068  00000000  00000000  0000540c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001246  00000000  00000000  00005474  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000f4  00000000  00000000  000066ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  000067ae  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__ctors_end>
   4:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
   8:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
   c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  10:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  14:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  18:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  1c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  20:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  24:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  28:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  2c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  30:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  34:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  38:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  3c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  40:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  44:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  48:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  4c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  50:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  54:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  58:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  5c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  60:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  64:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  68:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  6c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  70:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  74:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  78:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  7c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  80:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  84:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  88:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  8c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  90:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  94:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  98:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  9c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>

000000a0 <__ctors_end>:
  a0:	11 24       	eor	r1, r1
  a2:	1f be       	out	0x3f, r1	; 63
  a4:	cf ef       	ldi	r28, 0xFF	; 255
  a6:	cd bf       	out	0x3d, r28	; 61
  a8:	df e3       	ldi	r29, 0x3F	; 63
  aa:	de bf       	out	0x3e, r29	; 62
  ac:	0e 94 93 00 	call	0x126	; 0x126 <main>
  b0:	0c 94 a1 00 	jmp	0x142	; 0x142 <_exit>

000000b4 <__bad_interrupt>:
  b4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b8 <USART0_init>:
void USART0_sendChar(char c);
void USART0_sendString(char *str);

void USART0_init(void)
{
    PORTA.DIR &= ~PIN1_bm;
  b8:	e0 e0       	ldi	r30, 0x00	; 0
  ba:	f4 e0       	ldi	r31, 0x04	; 4
  bc:	80 81       	ld	r24, Z
  be:	8d 7f       	andi	r24, 0xFD	; 253
  c0:	80 83       	st	Z, r24
    PORTA.DIR |= PIN0_bm;
  c2:	80 81       	ld	r24, Z
  c4:	81 60       	ori	r24, 0x01	; 1
  c6:	80 83       	st	Z, r24
    
    USART0.BAUD = (uint16_t)USART0_BAUD_RATE(9600);
  c8:	e0 e0       	ldi	r30, 0x00	; 0
  ca:	f8 e0       	ldi	r31, 0x08	; 8
  cc:	8d e6       	ldi	r24, 0x6D	; 109
  ce:	95 e0       	ldi	r25, 0x05	; 5
  d0:	80 87       	std	Z+8, r24	; 0x08
  d2:	91 87       	std	Z+9, r25	; 0x09

    USART0.CTRLB |= USART_TXEN_bm; 
  d4:	86 81       	ldd	r24, Z+6	; 0x06
  d6:	80 64       	ori	r24, 0x40	; 64
  d8:	86 83       	std	Z+6, r24	; 0x06
  da:	08 95       	ret

000000dc <USART0_sendChar>:
}

void USART0_sendChar(char c)
{
    while (!(USART0.STATUS & USART_DREIF_bm))
  dc:	90 91 04 08 	lds	r25, 0x0804	; 0x800804 <__TEXT_REGION_LENGTH__+0x7f4804>
  e0:	95 ff       	sbrs	r25, 5
  e2:	fc cf       	rjmp	.-8      	; 0xdc <USART0_sendChar>
    {
        ;
    }        
    USART0.TXDATAL = c;
  e4:	80 93 02 08 	sts	0x0802, r24	; 0x800802 <__TEXT_REGION_LENGTH__+0x7f4802>
  e8:	08 95       	ret

000000ea <USART0_sendString>:
}

void USART0_sendString(char *str)
{
  ea:	0f 93       	push	r16
  ec:	1f 93       	push	r17
  ee:	cf 93       	push	r28
  f0:	df 93       	push	r29
  f2:	ec 01       	movw	r28, r24
    for(size_t i = 0; i < strlen(str); i++)
  f4:	8c 01       	movw	r16, r24
  f6:	fe 01       	movw	r30, r28
  f8:	01 90       	ld	r0, Z+
  fa:	00 20       	and	r0, r0
  fc:	e9 f7       	brne	.-6      	; 0xf8 <USART0_sendString+0xe>
  fe:	31 97       	sbiw	r30, 0x01	; 1
 100:	ec 1b       	sub	r30, r28
 102:	fd 0b       	sbc	r31, r29
 104:	c8 01       	movw	r24, r16
 106:	8c 1b       	sub	r24, r28
 108:	9d 0b       	sbc	r25, r29
 10a:	8e 17       	cp	r24, r30
 10c:	9f 07       	cpc	r25, r31
 10e:	30 f4       	brcc	.+12     	; 0x11c <__EEPROM_REGION_LENGTH__+0x1c>
    {
        USART0_sendChar(str[i]);
 110:	f8 01       	movw	r30, r16
 112:	81 91       	ld	r24, Z+
 114:	8f 01       	movw	r16, r30
 116:	0e 94 6e 00 	call	0xdc	; 0xdc <USART0_sendChar>
 11a:	ed cf       	rjmp	.-38     	; 0xf6 <USART0_sendString+0xc>
    }
}
 11c:	df 91       	pop	r29
 11e:	cf 91       	pop	r28
 120:	1f 91       	pop	r17
 122:	0f 91       	pop	r16
 124:	08 95       	ret

00000126 <main>:

int main(void)
{
    USART0_init();
 126:	0e 94 5c 00 	call	0xb8	; 0xb8 <USART0_init>
    
    while (1) 
    {
        USART0_sendString("Hello World!\r\n");
 12a:	86 e4       	ldi	r24, 0x46	; 70
 12c:	91 e4       	ldi	r25, 0x41	; 65
 12e:	0e 94 75 00 	call	0xea	; 0xea <USART0_sendString>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 132:	25 e1       	ldi	r18, 0x15	; 21
 134:	86 e1       	ldi	r24, 0x16	; 22
 136:	95 e0       	ldi	r25, 0x05	; 5
 138:	21 50       	subi	r18, 0x01	; 1
 13a:	80 40       	sbci	r24, 0x00	; 0
 13c:	90 40       	sbci	r25, 0x00	; 0
 13e:	e1 f7       	brne	.-8      	; 0x138 <main+0x12>
 140:	f4 cf       	rjmp	.-24     	; 0x12a <main+0x4>

00000142 <_exit>:
 142:	f8 94       	cli

00000144 <__stop_program>:
 144:	ff cf       	rjmp	.-2      	; 0x144 <__stop_program>
